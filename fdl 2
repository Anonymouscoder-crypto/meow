In [5]: from keras.layers import Input, Dense 
from keras.models import Model
from keras.datasets import mnist 
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

In [7]: (XTrain, YTrain), (XTest, YTest) = mnist.load_data() print('XTrain class = ',type(XTrain))
print('YTrain class = ',type(YTrain))
# shape of our dataset.
print('XTrain shape = ',XTrain. shape)
print('XTest shape = ',XTest.shape) 
print('YTrain shape = ',YTrain.shape) 
print('YTest shape = ',YTest.shape)
 Number of  distinct vaLues of our NNZS T target 
 print('YTrain values = ', np. unique (YTrain)) 
 print('YTest values = ', np. unique (YTest))
# Dis tribution of- c Lasses in our dataset.
unique, counts = np. unique (YTrain, return_counts=True)
print('YTrain distribution = ',dict (zip(unique, counts))) unique, counts = np. unique (YTest, return_counts=True) 
print('YTest distribution = ',dict(zip(unique, counts)))
XTrain class = <class 'numpy.ndarray'> YTrain class = â€¹class 'numpy.ndarray'> XTrain shape = (60000, 28, 28)
XTest shape = (10000, 28, 28) YTrain shape = (60000,)
YTest shape = (10000,)
YTrain values = [0 1 2 3 4 5 6 7 8 9]
YTest values = [0 1 2 3 4 5 6 7 8 9]
YTrain distribution = {0: 5923, 1: 6742, 2: 5958, 3: 6131, 4: 5842, 5: 5421, 6: 5
918, 7: 6265, 8: 5851, 9: 5949}
YTest distribution = {0: 980, 1: 1135, 2: 1032, 3: 1010, 4: 982, 5: 892, 6: 958,
7: 1028, 8: 974, 9: 1009}
 
ln[11]: XTrain = XTrain.astype('float32') / 255
XTest  = XTest. astype( 'I-1oat32' )  /  255
It data reshapp!ng.
XTrain = XTrain.reshape((len(XTrain), np. prod (XTrain.shape[1:]))) 
XTest=XTest.reshape((len(XTest), np.prod(XTest.shape[1:])))
print (XTrain.shape) 
print (XTest.shape)


ln[15]:InputModel = Input (shape=(784,))
EncodedLayer =Dense(32, activation='relu')(InputModel) 
DecodedLayer = Dense(784, activation='sigmoid') (EncodedLayer) 
AutoencoderModel = Model (InputModel, DecodedLayer)
# we can sufflrnarize our nodeL.
AutoencoderMode1.summary()

ln[19]:AutoencoderModel.compile(optimizer='adam', loss=' binary crossentropy') 
history = AutoencoderModel.fit(XTrain, XTrain,
batch size=25, epochs=10, shuffle=True,
validation_data: (XTest, XTest))
# make prediction to decode the digits 
DecodedDigits = AutoencoderModel.predict(XTest)






















 

 



